#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include "Crypto.h"
//
#define mac_size 3
 const int n = 48;
    char input[n]= "the amazing shady";
    char Eindex = 0;
    char Oindex = 0;
    char Iindex = 0;
    char encrypted_message[n] = {0};
    char output[n] = {0};
   
//
String Recieve_message();
//AP
const char* ssid = "TESTING";
const char* password = "12345678";
IPAddress AP_IP(192,168,1,1);
//STA
IPAddress staticIP(192,168,1,22);
IPAddress gateway(192,168,1,9);
IPAddress subnet(255,255,255,0);

WiFiUDP Udp;
unsigned int localUdpPort = 4210; // local port to listen on
String message = ""; 
//char key___ = DH(q, num);
char key___ = 27;
char key_AES[16];
char key_MAC[16];
void setup(void)
{
Serial.begin(9600);
Serial.println();

Serial.printf("Connecting to %s\n", ssid);
WiFi.begin(ssid, password);
WiFi.config(staticIP, gateway, subnet);


while (WiFi.status() != WL_CONNECTED)
{
delay(500);
Serial.print(".");
}
Serial.println();
Serial.print("Connected, IP address: ");
Serial.println(WiFi.localIP());

Udp.begin(localUdpPort);
Serial.printf("Now listening at IP %s, UDP port %d\n", WiFi.localIP().toString().c_str(), localUdpPort);

}


void loop() 
{
//send message to AP
message = Recieve_message();
//Serial.println(message);

char wifi_message[n];
for (int i = 0; i<= n;i++)
{
     if(i<message.length())
     wifi_message[i] = message[i];
     else
     wifi_message[i]=0;
}


for (int index = 0 ; index < n ; index+=12 )
   {
       sequence_key_generator(key_AES, key_MAC, mac_size, key___);
        
        char state[16] = { 0 };
        char message_t[16];
        for (int i = 0; i < 12; i++)
        {
            state[i] = wifi_message[Iindex];
            Iindex++;
        }
            // get the MAC for authintication 
            char temp_mac_message[16];
            copyArray(state, temp_mac_message, (char)sizeof(state));
            MAC(temp_mac_message, key_MAC, (char)sizeof(state));

            //printMessage(temp_mac_message, (char)sizeof(temp_mac_message), "encryption after mac");

            //-----------------------------------------------//
            //combine the state with the mac

            combine_message(message_t, state, temp_mac_message, (char)sizeof(state) - mac_size, mac_size);
            //printMessage(message, (char)sizeof(message), "combining the message");

            //----------------------------------------------//

            //AES for the message for confidientiallyty 
            aes_enc_dec(message_t, key_AES, 0);
            //printMessage(message, (char)sizeof(message), "AES enc Messgae ");

            for (char i = 0; i < 12; i++)
            {
                encrypted_message[Eindex] = message_t[i];
                Eindex++;
            }
            char REC_key_AES[16] ;
            char REC_key_MAC[16] ;
            sequence_key_generator(REC_key_AES, REC_key_MAC, mac_size, key___);
            aes_enc_dec(message_t, REC_key_AES, 1);
            //decryption testing
            char data[16];
            char temp_data[16];
            char mac[mac_size];
            // separate the mac from the message
            separete_mac(message_t, data, mac, (char)sizeof(message_t), mac_size);
            //printMessage(data, 16, "display recieved data");
            //printMessage(mac, mac_size, "display mac to check");

            //generate the mac from the message again
            copyArray(data, temp_data, (char)sizeof(data));

            // compare the mac 
            if (macCompare(temp_data, mac, REC_key_MAC, (char)sizeof(data), mac_size))
            {
                //printf("message recieved successfully");
            }
            for (char i = 0; i < 12; i++)
            {
                output[Oindex] = message_t[i];
                Oindex++;
            }
        
        
  }






Serial.println (wifi_message);
Serial.println (encrypted_message);
Serial.println (output);
Udp.beginPacket(AP_IP, localUdpPort);
Udp.write(encrypted_message);
Udp.endPacket();

delay(2000);



}

String Recieve_message()
{
  String local_message ="";
  char break_point =0;
  char c;
  while(1)
  {
  if(Serial.available()>0)
  {
    c=(char)Serial.read();
    if(c=='/')
    {
       return local_message;
    }
    else
    {
      local_message+=c;
//      break_point++;
      if(break_point >100)
      {
        return "error";
      }
    }
   }
  }
}